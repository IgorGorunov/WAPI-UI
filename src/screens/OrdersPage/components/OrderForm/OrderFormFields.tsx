import {FormFieldTypes, OptionType, WidthType} from "@/types/forms";
import {OrderHints} from "@/screens/OrdersPage/ordersHints.constants";

export const GeneralFields = (t, newObject: boolean) => [
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'wapiTrackingNumber',
        label: t('wapiTrackingNumber'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'status',
        label: t('status'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'statusAdditionalInfo',
        label: t('statusAdditionalInfo'),
        placeholder: "",
        disabled: true,
        width: WidthType.w50,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.DATE,
        type: "date",
        name: 'date',
        label: t('orderDate'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
        hint: OrderHints['date'] || '',
    },
    {
        fieldType: FormFieldTypes.DATE,
        type: "date",
        name: 'preferredDeliveryDate',
        label: t('preferredDeliveryDate'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
        hint: t('preferredDeliveryDateHint') || '',
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'clientOrderID',
        label: t('clientOrderId'),
        placeholder: "",
        width: WidthType.w50,
        classNames: "",
        hint: t('clientOrderIdHint') || '',
    },
];

export const DetailsFields = ({t,warehouses, courierServices, handleWarehouseChange, handleCourierServiceChange, linkToTrack, newObject}: {t: any; warehouses: OptionType[], courierServices: OptionType[], handleWarehouseChange:(w: string)=>void, handleCourierServiceChange: (a: string)=>void, linkToTrack:any, newObject: boolean}) => [
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'preferredWarehouse',
        label: t('preferredWarehouse'),
        placeholder: "",
        options: warehouses,
        width: WidthType.w33,
        classNames: "",
        onChange: handleWarehouseChange,
        hint: ('preferredWarehouseHint') || '',
    },
    {
        fieldType: FormFieldTypes.TOGGLE,
        type: "text",
        name: 'preferredWarehouseMandatory',
        label:t('preferredWarehouseMandatory'),
        placeholder: "",
        width: WidthType.w17,
        classNames: "",
        hint: t('preferredWarehouseMandatoryHint') || '',
    },
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'preferredCourierService',
        label: t('preferredCourierService'),
        placeholder: "",
        options: courierServices,
        width: WidthType.w33,
        classNames: "",
        onChange: handleCourierServiceChange,
        hint: t('preferredCourierServiceHint') || '',
    },
    {
        fieldType: FormFieldTypes.TOGGLE,
        type: "text",
        name: 'preferredCourierServiceMandatory',
        label: t('preferredCourierServiceMandatory'),
        placeholder: "",
        width: WidthType.w17,
        classNames: "",
        hint: t('preferredCourierServiceMandatoryHint') || '',
    },
    // {
    //     fieldType: FormFieldTypes.TEXT,
    //     type: "text",
    //     name: 'commentWarehouse',
    //     label: 'Comment for warehouse',
    //     placeholder: "",
    //     width: WidthType.w50,
    //     classNames: "",
    // },
    // {
    //     fieldType: FormFieldTypes.TEXT,
    //     type: "text",
    //     name: 'commentCourierService',
    //     label: 'Comment for courier service ',
    //     placeholder: "",
    //     width: WidthType.w50,
    //     classNames: "",
    // },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'warehouse',
        label: t('warehouse'),
        placeholder: "",
        disabled: true,
        width: WidthType.w50,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'courierService',
        label: t('courierService'),
        placeholder: "",
        disabled: true,
        width: WidthType.w50,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'courierServiceTrackingNumber',
        label: t('courierServiceTrackingNumber'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'courierServiceTrackingNumberCurrent',
        label: t('courierServiceTrackingNumberCurrent'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.OTHER,
        name: 'trackingLink',
        label: t('trackingLink'),
        otherComponent: linkToTrack,
        width: WidthType.w50,
        classNames: 'order-tracking-link',
        isDisplayed: !newObject,
    },
];

export const ReceiverFields = ({t, requiredFieldMessage, validEmailMessage, countries, prefix=''}: { t:any; requiredFieldMessage:string; validEmailMessage:string; countries: OptionType[]; prefix?:string; }) => [
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: `${prefix}receiverCountry`,
        label: t('receiverCountry'),
        placeholder: "",
        options: countries,
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverCounty`,
        label: t('receiverCounty'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverCity`,
        label: t('receiverCity'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverZip`,
        label: t('receiverZip'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverAddress`,
        label: t('receiverAddress'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverPhone`,
        label: t('receiverPhone'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverEMail`,
        label: t('receiverEMail'),
        placeholder: "",
        rules: {
            validate: {
                matchPattern: (v) =>
                    v==='' || /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v) ||
                    validEmailMessage,
            },
        },
        errorMessage: "Required field",
        width: WidthType.w25,
        classNames: "",
        needToasts: false,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverFullName`,
        label: t('receiverFullName'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: `${prefix}receiverComment`,
        label:t('receiverComment'),
        placeholder: "",
        maxLength: 50,
        width: WidthType.w100,
        classNames: "",
    },
];

export const PickUpPointFields = ({t, countries}: { t: any; countries: OptionType[] }) => [
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'receiverPickUpCountry',
        label: t('receiverPickUpCountry'),
        placeholder: "",
        options: countries,
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverPickUpCity',
        label: t('receiverPickUpCity'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverPickUpName',
        label: t('receiverPickUpName'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverPickUpAddress',
        label: t('receiverPickUpAddress'),
        placeholder: "",
        width: WidthType.w100,
        classNames: "",
    },

];

