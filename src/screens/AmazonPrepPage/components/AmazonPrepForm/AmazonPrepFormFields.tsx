import {FormFieldTypes, OptionType, WidthType} from "@/types/forms";
import {AmazonPrepHints} from "@/screens/AmazonPrepPage/amazonPrepHints.constants";

export const GeneralFields = (t, newObject) => [
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'wapiTrackingNumber',
        label: t('wapiTrackingNumber'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'status',
        label: t('status'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'statusAdditionalInfo',
        label: t('statusAdditionalInfo'),
        placeholder: "",
        disabled: true,
        width: WidthType.w50,
        classNames: "",
        isDisplayed: !newObject,
    },
    {
        fieldType: FormFieldTypes.DATE,
        type: "date",
        name: 'date',
        label: t('date'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
        hint: t('dateHint') || '',
    },
    {
        fieldType: FormFieldTypes.DATE,
        type: "date",
        name: 'preferredDeliveryDate',
        label: t('preferredDeliveryDate'),
        placeholder: "",
        width: WidthType.w25,
        classNames: "",
        hint: t('preferredDeliveryDateHint') || '',
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'clientOrderID',
        label: t('clientOrderId'),
        placeholder: "",
        width: WidthType.w50,
        classNames: "",
        hint: t('clientOrderIdHint') || '',
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'comment',
        label: t('comment'),
        placeholder: "",
        width: WidthType.w100,
        classNames: "",
        hint: t('commentHint') || '',
    },
];

export const DetailsFields = ({t, requiredFieldMessage, newObject, warehouses, courierServices, handleWarehouseChange,linkToTrack,deliveryMethodOptions,  carrierTypeOptions, multipleLocations=false}:{t:any, requiredFieldMessage:string, newObject:boolean, warehouses: OptionType[], courierServices: OptionType[], handleWarehouseChange:(w: string)=>void,linkToTrack:any; deliveryMethodOptions: OptionType[];  carrierTypeOptions: OptionType[]; multipleLocations?: boolean;}) => [
    {
        name: 'grid-11',
        fieldType: FormFieldTypes.GRID,
        width: WidthType.w50,
        fields: [{
            fieldType: FormFieldTypes.TEXT,
            type: "text",
            name: 'asnNumber',
            label: t('asn'),
            placeholder: "",
            rules: {
                required: requiredFieldMessage,
            },
            width: WidthType.autoGrow,
            classNames: "",
            hint: t('asnHint') || '',
        },
        {
            fieldType:FormFieldTypes.RADIO,
            name: 'deliveryMethod',
            options: deliveryMethodOptions,
            width: WidthType.autoNoGrow,
            hint: AmazonPrepHints['deliveryMethod'] || '',
        }]
    },
    {
        fieldType: FormFieldTypes.GRID,
        name: 'grid-2',
        isGrid: true,
        width: WidthType.w50,
        fields: [
            {
                fieldType:FormFieldTypes.RADIO,
                name: 'carrierType',
                options: carrierTypeOptions,
                width: WidthType.autoNoGrow,
                //classNames: 'flex-auto',
                hint: t('carrierTypeHint') || '',
            },
            //
            // {
            //     fieldType: FormFieldTypes.TOGGLE,
            //     name: 'prepackedMasterBox',
            //     label: "Prepacked",
            //     width: WidthType.autoGrow,
            //     classNames: '',
            // //disabled: multipleLocations,
            // }
        ]
    },
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'warehouse',
        label: t('warehouse'),
        placeholder: "",
        rules: {
            required: requiredFieldMessage,
        },
        options: warehouses,
        width: WidthType.w50,
        //onChange: handleWarehouseChange,
        classNames: "",
        hint: t('warehouseHint') || '',
    },
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'courierService',
        label: t('courierService'),
        placeholder: "",
        options: courierServices,
        width: WidthType.w50,
        classNames: "",
        disabled: true, //carrierDisabled,
        hint: t('courierServiceHint') || '',
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'courierServiceTrackingNumber',
        label: t('courierServiceTrackingNumber'),
        placeholder: "",
        disabled: true,
        width: WidthType.w25,
        classNames: "",
        hint: t('courierServiceTrackingNumberHint') || '',
    },
    {
        fieldType: FormFieldTypes.OTHER,
        name: 'trackingLink',
        label: t('trackingLink'),
        otherComponent: linkToTrack,
        width: WidthType.w75,
        classNames: 'amazon-tracking-link',
        hint: t('trackingLinkHint') || '',
        isDisplayed: !newObject,
    },
];

export const ReceiverFields = ({t, requiredFieldMessage, validEMaiMessage, countries, multipleLocations=false}: { t:any, requiredFieldMessage:string, validEMaiMessage:string, countries: OptionType[]; multipleLocations?: boolean;}) => [
    {
        fieldType: FormFieldTypes.TOGGLE,
        name: 'multipleLocations',
        label: t('multipleLocations'),
        width: WidthType.w100,
        classNames: "",
        hint: t('multipleLocationsHint') || '',
    },
    {
        fieldType: FormFieldTypes.SELECT,
        type: "text",
        name: 'receiverCountry',
        label: t('receiverCountry'),
        placeholder: "",
        options: countries,
        rules: {
            required: multipleLocations ? false : requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverCity',
        label: t('receiverCity'),
        placeholder: "",
        rules: {
            required: multipleLocations ? false : requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverZip',
        label: t('receiverZip'),
        placeholder: "",
        rules:  {
            required: multipleLocations ? false : requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w17,
        classNames: "",
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverAddress',
        label: t('receiverAddress'),
        placeholder: "",
        rules: {
            required: multipleLocations ? false : requiredFieldMessage,
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w33,
        classNames: "",
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverPhone',
        label: t('receiverPhone'),
        placeholder: "",
        // rules: {
        //     required: "Required field",
        // },
        errorMessage: "Required field",
        width: WidthType.w25,
        classNames: "",
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverEMail',
        label: t('receiverEMail'),
        placeholder: "",
        rules: {
            validate: {
                matchPattern: (v) =>
                    v==='' || /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v) ||
                    validEMaiMessage,
            },
        },
        errorMessage: requiredFieldMessage,
        width: WidthType.w25,
        classNames: "",
        needToasts: false,
        disabled: multipleLocations,
    },
    {
        fieldType: FormFieldTypes.TEXT,
        type: "text",
        name: 'receiverFullName',
        label: t('receiverFullName'),
        placeholder: "",
        rules: {
            required: multipleLocations ? false : requiredFieldMessage,
        },
        errorMessage: "Required field",
        width: WidthType.w50,
        classNames: "",
        disabled: multipleLocations,
    },
    // {
    //     fieldType: FormFieldTypes.TEXT,
    //     type: "text",
    //     name: 'receiverComment',
    //     label: 'Comment',
    //     placeholder: "",
    //     width: WidthType.w100,
    //     classNames: "",
    //     disabled: multipleLocations,
    // },
];

